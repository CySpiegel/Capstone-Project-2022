# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import actions_pb2 as actions__pb2


class ActionsStub(object):
    """Interface exported by the server
    a Action service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DoSomthingNew = channel.unary_unary(
                '/Actions/DoSomthingNew',
                request_serializer=actions__pb2.DoSomethingRequest.SerializeToString,
                response_deserializer=actions__pb2.DoSomethingResponse.FromString,
                )
        self.RemoteExecution = channel.unary_unary(
                '/Actions/RemoteExecution',
                request_serializer=actions__pb2.RemoteExecutionRequest.SerializeToString,
                response_deserializer=actions__pb2.RemoteExecutionResponse.FromString,
                )


class ActionsServicer(object):
    """Interface exported by the server
    a Action service
    """

    def DoSomthingNew(self, request, context):
        """RPC function that makes the RPC call to the server
        Not the name is the same as the function contained in the server.py
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoteExecution(self, request, context):
        """Remote Execution of command via paramiko
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DoSomthingNew': grpc.unary_unary_rpc_method_handler(
                    servicer.DoSomthingNew,
                    request_deserializer=actions__pb2.DoSomethingRequest.FromString,
                    response_serializer=actions__pb2.DoSomethingResponse.SerializeToString,
            ),
            'RemoteExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoteExecution,
                    request_deserializer=actions__pb2.RemoteExecutionRequest.FromString,
                    response_serializer=actions__pb2.RemoteExecutionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Actions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Actions(object):
    """Interface exported by the server
    a Action service
    """

    @staticmethod
    def DoSomthingNew(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Actions/DoSomthingNew',
            actions__pb2.DoSomethingRequest.SerializeToString,
            actions__pb2.DoSomethingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoteExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Actions/RemoteExecution',
            actions__pb2.RemoteExecutionRequest.SerializeToString,
            actions__pb2.RemoteExecutionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
